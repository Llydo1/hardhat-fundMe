{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n// Declare solidity version\npragma solidity ^0.8.0;\n\n// Import library\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\nerror FundMe__NotEnough();\nerror FundMe__isError();\n\n// @title A contract for crowd funding\n// @author Llydo1\n// @notice This contract is a practice to learn web3\n// @dev This implements price feed from chainlinks\ncontract FundMe {\n    // Type Declaration\n    using PriceConverter for uint256;\n\n    // State Variables!\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address[] public s_funders;\n    mapping(address => uint256) public addressToamountFunded;\n    address public immutable i_owner;\n    AggregatorV3Interface public immutable priceFeed;\n\n    // Modifier\n    // @notice Check for the owner of the contract\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    // Functions constructor\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // Functions recieve, fallback\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    // Functions\n    // @notice This function funds this contract\n    // @dev This implements price feed from chainlinks\n    function fund() public payable {\n        if (msg.value.getConversionRate(priceFeed) < MINIMUM_USD)\n            revert FundMe__NotEnough();\n        s_funders.push(msg.sender);\n        addressToamountFunded[msg.sender] += msg.value;\n    }\n\n    // @notice This function withdraw the fund to the contract owner\n    function withdraw() public onlyOwner {\n        address[] memory funders = s_funders;\n        for (uint256 i = 0; i < funders.length; i++) {\n            addressToamountFunded[funders[i]] = 0;\n        }\n        s_funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!callSuccess) revert FundMe__isError();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Declare solidity version\npragma solidity ^0.8.0;\n\n// Import library\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// @title A library for price converting\n// @author Llydo1\n// @dev This uses price feed from chainlinks\nlibrary PriceConverter {\n    // @dev This using price feed from chainlinks\n    // @params priceFeed The address of AggregatorV3Interface contract\n    // @return Usd amount represent the amount of ethereum\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    // @dev This function for get converting rate\n    // @params ethAmount the amount of ether for converting\n    // @params priceFeed The address of AggregatorV3Interface contract\n    // @return The current conversion rate from chainlink datafeeds\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        return (getPrice(priceFeed) * ethAmount) / 1e18;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}